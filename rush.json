{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.54.0",
  "pnpmVersion": "6.7.1",

  /**
   * Options that are only used when the PNPM package manager is selected
   */
  "pnpmOptions": {
    "pnpmStore": "local",
    // TODO: might need to disable if this causes issues
    "strictPeerDependencies": true,
    "resolutionStrategy": "fewer-dependencies",
    "preventManualShrinkwrapChanges": true,

    /**
     * If true, then `rush install` will use the PNPM workspaces feature to perform the
     * install.
     *
     * This feature uses PNPM to perform the entire monorepo install. When using workspaces, Rush will
     * generate a "pnpm-workspace.yaml" file referencing all local projects to install. Rush will
     * also generate a "pnpmfile.js" which is used to provide preferred versions support. When install
     * is run, this pnpmfile will be used to replace dependency version ranges with a smaller subset
     * of the original range. If the preferred version is not fully a subset of the original version
     * range, it will be left as-is. After this, the pnpmfile.js provided in the repository (if one
     * exists) will be called to further modify package dependencies.
     *
     * This option is experimental. The default value is false.
     */
    "useWorkspaces": false
  },

  "nodeSupportedVersionRange": ">=14.15.0 <15.0.0",
  "suppressNodeLtsWarning": false,
  "ensureConsistentVersions": true,

  "projectFolderMinDepth": 1,
  "projectFolderMaxDepth": 2,

  "allowMostlyStandardPackageNames": false,

  "approvedPackagesPolicy": {
    "reviewCategories": [
      "production",
      "tools"
    ],
    "ignoredNpmScopes": ["@types"]
  },

  /**
   * If you use Git as your version control system, this section has some additional
   * optional features you can use.
   */
  "gitPolicy": {
    "allowedEmailRegExps": [
      "[^@]+@digio\\.com\\.au",
      "[^@]+@cmd\\.com\\.au"
    ],
    "sampleEmail": "firstname.lastname@digio.com.au"
  },

  "repository": {
    "url": "https://github.com/pseudo-su/rush-example",
    "defaultBranch": "main",
    "defaultRemote": "origin"
  },

  "eventHooks": {
    "preRushInstall": [],
    "postRushInstall": [],
    "preRushBuild": [],
    "postRushBuild": []
  },

  "variants": [],
  "telemetryEnabled": false,
  "hotfixChangeEnabled": false,

  /**
   * (Required) This is the inventory of projects to be managed by Rush.
   *
   * Rush does not automatically scan for projects using wildcards, for a few reasons:
   * 1. Depth-first scans are expensive, particularly when tools need to repeatedly collect the list.
   * 2. On a caching CI machine, scans can accidentally pick up files left behind from a previous build.
   * 3. It's useful to have a centralized inventory of all projects and their important metadata.
   */
  "projects": [
    {
      "packageName": "@libs/example-library",
      "projectFolder": "libs/example-library",
      "reviewCategory": "production"
    },
    {
      "packageName": "@services/example-website",
      "projectFolder": "services/example-website",
      "reviewCategory": "production"
    },
    {
      "packageName": "@tools/eslint",
      "projectFolder": "tools/eslint",
      "reviewCategory": "tools"
    }
  ]
}
